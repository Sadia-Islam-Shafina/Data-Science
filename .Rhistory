cl = weather_train_labels,
k = k)
# Calculate accuracy for this fold
accuracies_approach2[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
# Calculate the mean accuracy across folds for Approach 2
mean_accuracy_approach2 <- mean(accuracies_approach2)
# Print mean accuracy for Approach 2
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy_approach2, "\n")
# Load required packages
install.packages("class")
library(class)
install.packages("caret")
library(caret)
# Set seed for reproducibility
set.seed(123)
# Assuming 'normalized_data' is your original dataset
# Replace this with the correct name if necessary
# Approach 1: Dividing the data into training and test set
train_size <- 0.7
train_indices <- sample(1:nrow(normalized_data), size = floor(train_size * nrow(normalized_data)))
test_indices <- setdiff(1:nrow(normalized_data), train_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
# Calculate accuracy
accuracy_approach1 <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
# Print accuracy for Approach 1
cat("Accuracy (Dividing into Training and Test Set):", accuracy_approach1, "\n")
# Approach 2: 10-fold cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Initialize vector to store accuracies
accuracies_approach2 <- numeric(num_folds)
# Perform 10-fold cross-validation
for (i in 1:num_folds) {
# Split data into training and testing sets for this fold
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
# Calculate accuracy for this fold
accuracies_approach2[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
# Calculate the mean accuracy across folds for Approach 2
mean_accuracy_approach2 <- mean(accuracies_approach2)
# Print mean accuracy for Approach 2
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy_approach2, "\n")
install.packages("caret")
Set seed for reproducibility
Set seed for reproducibility
# Set seed for reproducibility
set.seed(123)
# Assuming 'normalized_data' is your original dataset
# Replace this with the correct name if necessary
# Approach 1: Dividing the data into training and test set
train_size <- 0.7
train_indices <- sample(1:nrow(normalized_data), size = floor(train_size * nrow(normalized_data)))
test_indices <- setdiff(1:nrow(normalized_data), train_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
# Assuming 'normalized_data' is your original dataset
# Replace this with the correct name if necessary
# Approach 1: Dividing the data into training and test set
train_size <- 0.7
train_indices <- sample(1:nrow(normalized_data), size = floor(train_size * nrow(normalized_data)))
test_indices <- setdiff(1:nrow(normalized_data), train_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
# Assuming 'normalized_data' is your original dataset
# Replace this with the correct name if necessary
# Approach 1: Dividing the data into training and test set
train_size <- 0.7
train_indices <- sample(1:nrow(normalized_data), size = floor(train_size * nrow(normalized_data)))
test_indices <- setdiff(1:nrow(normalized_data), train_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
# Assuming 'normalized_data' is your original dataset
# Replace this with the correct name if necessary
# Approach 1: Dividing the data into training and test set
train_size <- 0.7
train_indices <- sample(1:nrow(normalized_data), size = floor(train_size * nrow(normalized_data)))
test_indices <- setdiff(1:nrow(normalized_data), train_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
####............................................osssojo...........................................
# Load required packages
install.packages("class")
library(class)
install.packages("caret")
library(caret)
# Set seed for reproducibility
set.seed(123)
train_size <- 0.7
train_indices <- sample(1:nrow(normalized_data), size = floor(train_size * nrow(normalized_data)))
test_indices <- setdiff(1:nrow(normalized_data), train_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
# Calculate accuracy
accuracy_approach1 <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
# Print accuracy for Approach 1
cat("Accuracy (Dividing into Training and Test Set):", accuracy_approach1, "\n")
# Approach 2: 10-fold cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Initialize vector to store accuracies
accuracies_approach2 <- numeric(num_folds)
# Perform 10-fold cross-validation
for (i in 1:num_folds) {
# Split data into training and testing sets for this fold
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
# Calculate accuracy for this fold
accuracies_approach2[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
# Calculate the mean accuracy across folds for Approach 2
mean_accuracy_approach2 <- mean(accuracies_approach2)
# Print mean accuracy for Approach 2
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy_approach2, "\n")
# Set seed for reproducibility
set.seed(123)
# Number of folds for cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Initialize vector to store accuracies
accuracies <- numeric(num_folds)
# Perform 10-fold cross-validation
for (i in 1:num_folds) {
# Split data into training and testing sets for this fold
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
# Extract the input features and the decision attribute
input_features_train <- weather_train[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
input_features_test <- weather_test[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = input_features_train,
test = input_features_test,
cl = weather_train_labels,
k = k)
# Calculate accuracy for this fold
accuracies[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
# Calculate the mean accuracy across folds
mean_accuracy <- mean(accuracies)
# Print mean accuracy
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy, "\n")
num_folds <- 10
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
accuracies <- numeric(num_folds)
for (i in 1:num_folds) {
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
input_features_train <- weather_train[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
input_features_test <- weather_test[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = input_features_train,
test = input_features_test,
cl = weather_train_labels,
k = k)
accuracies[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
mean_accuracy <- mean(accuracies)
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy, "\n")
num_folds <- 10
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
accuracies <- numeric(num_folds)
for (i in 1:num_folds) {
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
input_features_train <- weather_train[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
input_features_test <- weather_test[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = input_features_train,
test = input_features_test,
cl = weather_train_labels,
k = k)
accuracies[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
mean_accuracy <- mean(accuracies)
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy, "\n")
set.seed(123)
num_folds <- 10
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
accuracies <- numeric(num_folds)
for (i in 1:num_folds) {
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
input_features_train <- weather_train[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
input_features_test <- weather_test[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = input_features_train,
test = input_features_test,
cl = weather_train_labels,
k = k)
accuracies[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
mean_accuracy <- mean(accuracies)
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy, "\n")
install.packages("class")
library(class)
install.packages("caret")
library(caret)
set.seed(123)
num_folds <- 10
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
accuracies <- numeric(num_folds)
for (i in 1:num_folds) {
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
input_features_train <- weather_train[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
input_features_test <- weather_test[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = input_features_train,
test = input_features_test,
cl = weather_train_labels,
k = k)
accuracies[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
mean_accuracy <- mean(accuracies)
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy, "\n")
install.packages("caret")
set.seed(123)
num_folds <- 10
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Set seed for reproducibility
set.seed(123)
# Assuming 'normalized_data' is your original dataset
# Replace this with the correct name if necessary
# Number of folds for cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Assuming 'normalized_data' is your original dataset
# Replace this with the correct name if necessary
# Number of folds for cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Set seed for reproducibility
set.seed(123)
# Set seed for reproducibility
set.seed(123)
# Assuming 'normalized_data' is your original dataset
# Replace this with the correct name if necessary
# Number of folds for cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
library(class)
install.packages("caret")
library(caret)
# Set seed for reproducibility
set.seed(123)
# Replace this with the correct name if necessary
# Number of folds for cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Initialize vector to store accuracies
accuracies <- numeric(num_folds)
# Perform 10-fold cross-validation
for (i in 1:num_folds) {
# Split data into training and testing sets for this fold
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
# Extract the input features (6 attributes) and the decision attribute (Weather)
input_features_train <- weather_train[, -which(names(weather_train) == "Weather")]
input_features_test <- weather_test[, -which(names(weather_test) == "Weather")]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = input_features_train,
test = input_features_test,
cl = weather_train_labels,
k = k)
# Calculate accuracy for this fold
accuracies[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
# Calculate the mean accuracy across folds
mean_accuracy <- mean(accuracies)
# Print mean accuracy
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy, "\n")
library(class)
library(caret)
# Set seed for reproducibility
set.seed(123)
# Number of folds for cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Initialize matrices to store confusion matrices and metrics
confusion_matrices <- list()
recalls <- numeric(num_folds)
precisions <- numeric(num_folds)
# Define a function to calculate recall and precision
calculate_metrics <- function(cm) {
recall <- cm[1, 1] / sum(cm[1, ])
precision <- cm[1, 1] / sum(cm[, 1])
return(list(recall = recall, precision = precision))
}
# Perform 10-fold cross-validation
for (i in 1:num_folds) {
# Split data into training and testing sets for this fold
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
# Extract the input features and the decision attribute
input_features_train <- weather_train[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
input_features_test <- weather_test[, c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_.",
"Wind.Speed_km.h", "Visibility_km", "Press_kPa")]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = input_features_train,
test = input_features_test,
cl = weather_train_labels,
k = k)
# Calculate confusion matrix for this fold
confusion_matrices[[i]] <- table(predicted = predicted_labels, actual = weather_test_labels)
# Calculate recall and precision for this fold
metrics <- calculate_metrics(confusion_matrices[[i]])
recalls[i] <- metrics$recall
precisions[i] <- metrics$precision
}
# Calculate the mean recall and precision across folds
mean_recall <- mean(recalls)
mean_precision <- mean(precisions)
# Print mean recall and precision
cat("Mean Recall:", mean_recall, "\n")
cat("Mean Precision:", mean_precision, "\n")
# Print individual confusion matrices for each fold
for (i in 1:num_folds) {
cat("Confusion Matrix (Fold", i, "):\n")
print(confusion_matrices[[i]])
cat("\n")
}
# Set seed for reproducibility
set.seed(123)
# Number of folds for cross-validation
num_folds <- 10
# Create indices for cross-validation folds
fold_indices <- createFolds(normalized_data$Weather, k = num_folds)
# Initialize vector to store accuracies
accuracies <- numeric(num_folds)
# Perform 10-fold cross-validation
for (i in 1:num_folds) {
# Split data into training and testing sets for this fold
test_indices <- fold_indices[[i]]
train_indices <- setdiff(1:nrow(normalized_data), test_indices)
weather_train <- normalized_data[train_indices, ]
weather_test <- normalized_data[test_indices, ]
# Extract the input features (6 attributes) and the decision attribute (Weather)
input_features_train <- weather_train[, -which(names(weather_train) == "Weather")]
input_features_test <- weather_test[, -which(names(weather_test) == "Weather")]
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = input_features_train,
test = input_features_test,
cl = weather_train_labels,
k = k)
# Calculate accuracy for this fold
accuracies[i] <- sum(predicted_labels == weather_test_labels) / length(weather_test_labels)
}
# Calculate the mean accuracy across folds
mean_accuracy <- mean(accuracies)
# Print mean accuracy
cat("Mean Accuracy (10-Fold Cross-Validation):", mean_accuracy, "\n")
Weather.Data <- read.csv("D:/11th semmester/INTRODUCTION TO DATA SCIENCE [C]/final project materials/Weather Data.csv")
str(Weather.Data)
head(Weather.Data)
# Convert test_y to factor with the same levels as train_y
# Extract the labels
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
weather_train_labels
weather_test_labels
####............................agein     2..................
install.packages("class")
library(class)
# Select important attributes
important_attributes <- c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_", "Wind.Speed_km.h")
# Create a new dataset with only the selected attributes
selected_data <- Weather.Data[, c(important_attributes, "Weather")]
install.packages("class")
# Select important attributes based on correlation
selected_attributes <- normalized_data %>%
select(Temp_C, Dew.Point.Temp_C, Wind.Speed_km.h, Visibility_km, Press_kPa)
weather_train_labels <- weather_train$Weather
weather_test_labels <- weather_test$Weather
# Perform KNN classification
k <- 3  # Set the value of 'k'
predicted_labels <- knn(train = weather_train[, -which(names(weather_train) == "Weather")],
test = weather_test[, -which(names(weather_test) == "Weather")],
cl = weather_train_labels,
k = k)
important_attributes <- c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_", "Wind.Speed_km.h")
# Create a new dataset with only the selected attributes
selected_data <- Weather.Data[, c(important_attributes, "Weather")]
important_attributes <- c("Temp_C", "Dew.Point.Temp_C", "Rel.Hum_", "Wind.Speed_km.h")
# Create a new dataset with only the selected attributes
selected_data <- Weather.Data[, c(important_attributes, "Weather")]
